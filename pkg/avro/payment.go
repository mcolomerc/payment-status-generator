// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     payment.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Payment struct {
	Id string `json:"id"`

	Ts int64 `json:"ts"`

	Date_ts string `json:"date_ts"`

	Destination string `json:"destination"`

	Source string `json:"source"`

	Currency string `json:"currency"`

	Amount float64 `json:"amount"`

	Status string `json:"status"`
}

const PaymentAvroCRC64Fingerprint = "\f\r\xac\xbdx^5\xee"

func NewPayment() Payment {
	r := Payment{}
	return r
}

func DeserializePayment(r io.Reader) (Payment, error) {
	t := NewPayment()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializePaymentFromSchema(r io.Reader, schema string) (Payment, error) {
	t := NewPayment()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writePayment(r Payment, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteLong(r.Ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Date_ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Destination, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Source, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Currency, w)
	if err != nil {
		return err
	}
	err = vm.WriteDouble(r.Amount, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Status, w)
	if err != nil {
		return err
	}
	return err
}

func (r Payment) Serialize(w io.Writer) error {
	return writePayment(r, w)
}

func (r Payment) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"ts\",\"type\":\"long\"},{\"name\":\"date_ts\",\"type\":\"string\"},{\"name\":\"destination\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"double\"},{\"name\":\"status\",\"type\":\"string\"}],\"name\":\"confluent.io.examples.serialization.avro.Payment\",\"type\":\"record\"}"
}

func (r Payment) SchemaName() string {
	return "confluent.io.examples.serialization.avro.Payment"
}

func (_ Payment) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Payment) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Payment) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Payment) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Payment) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Payment) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Payment) SetString(v string)   { panic("Unsupported operation") }
func (_ Payment) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Payment) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.Long{Target: &r.Ts}

		return w

	case 2:
		w := types.String{Target: &r.Date_ts}

		return w

	case 3:
		w := types.String{Target: &r.Destination}

		return w

	case 4:
		w := types.String{Target: &r.Source}

		return w

	case 5:
		w := types.String{Target: &r.Currency}

		return w

	case 6:
		w := types.Double{Target: &r.Amount}

		return w

	case 7:
		w := types.String{Target: &r.Status}

		return w

	}
	panic("Unknown field index")
}

func (r *Payment) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Payment) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Payment) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Payment) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Payment) HintSize(int)                     { panic("Unsupported operation") }
func (_ Payment) Finalize()                        {}

func (_ Payment) AvroCRC64Fingerprint() []byte {
	return []byte(PaymentAvroCRC64Fingerprint)
}

func (r Payment) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["ts"], err = json.Marshal(r.Ts)
	if err != nil {
		return nil, err
	}
	output["date_ts"], err = json.Marshal(r.Date_ts)
	if err != nil {
		return nil, err
	}
	output["destination"], err = json.Marshal(r.Destination)
	if err != nil {
		return nil, err
	}
	output["source"], err = json.Marshal(r.Source)
	if err != nil {
		return nil, err
	}
	output["currency"], err = json.Marshal(r.Currency)
	if err != nil {
		return nil, err
	}
	output["amount"], err = json.Marshal(r.Amount)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Payment) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["date_ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Date_ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for date_ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["destination"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Destination); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for destination")
	}
	val = func() json.RawMessage {
		if v, ok := fields["source"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Source); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for source")
	}
	val = func() json.RawMessage {
		if v, ok := fields["currency"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Currency); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for currency")
	}
	val = func() json.RawMessage {
		if v, ok := fields["amount"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Amount); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for amount")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	return nil
}
