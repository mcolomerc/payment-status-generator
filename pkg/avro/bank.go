// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     bank.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Bank struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Country string `json:"country"`

	Email string `json:"email"`

	Website string `json:"website"`

	BankCode string `json:"bankCode"`

	Bic string `json:"bic"`

	Branch string `json:"branch"`

	Created_ts string `json:"created_ts"`

	Updated_ts string `json:"updated_ts"`

	Version int32 `json:"version"`
}

const BankAvroCRC64Fingerprint = "Po\xec\xa7Ä¤\xb84"

func NewBank() Bank {
	r := Bank{}
	return r
}

func DeserializeBank(r io.Reader) (Bank, error) {
	t := NewBank()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeBankFromSchema(r io.Reader, schema string) (Bank, error) {
	t := NewBank()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeBank(r Bank, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Name, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Country, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Email, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Website, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.BankCode, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Bic, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Branch, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Created_ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Updated_ts, w)
	if err != nil {
		return err
	}
	err = vm.WriteInt(r.Version, w)
	if err != nil {
		return err
	}
	return err
}

func (r Bank) Serialize(w io.Writer) error {
	return writeBank(r, w)
}

func (r Bank) Schema() string {
	return "{\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"website\",\"type\":\"string\"},{\"name\":\"bankCode\",\"type\":\"string\"},{\"name\":\"bic\",\"type\":\"string\"},{\"name\":\"branch\",\"type\":\"string\"},{\"name\":\"created_ts\",\"type\":\"string\"},{\"name\":\"updated_ts\",\"type\":\"string\"},{\"name\":\"version\",\"type\":\"int\"}],\"name\":\"confluent.io.examples.serialization.avro.Bank\",\"type\":\"record\"}"
}

func (r Bank) SchemaName() string {
	return "confluent.io.examples.serialization.avro.Bank"
}

func (_ Bank) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Bank) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Bank) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Bank) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Bank) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Bank) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Bank) SetString(v string)   { panic("Unsupported operation") }
func (_ Bank) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Bank) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Id}

		return w

	case 1:
		w := types.String{Target: &r.Name}

		return w

	case 2:
		w := types.String{Target: &r.Country}

		return w

	case 3:
		w := types.String{Target: &r.Email}

		return w

	case 4:
		w := types.String{Target: &r.Website}

		return w

	case 5:
		w := types.String{Target: &r.BankCode}

		return w

	case 6:
		w := types.String{Target: &r.Bic}

		return w

	case 7:
		w := types.String{Target: &r.Branch}

		return w

	case 8:
		w := types.String{Target: &r.Created_ts}

		return w

	case 9:
		w := types.String{Target: &r.Updated_ts}

		return w

	case 10:
		w := types.Int{Target: &r.Version}

		return w

	}
	panic("Unknown field index")
}

func (r *Bank) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Bank) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Bank) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Bank) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Bank) HintSize(int)                     { panic("Unsupported operation") }
func (_ Bank) Finalize()                        {}

func (_ Bank) AvroCRC64Fingerprint() []byte {
	return []byte(BankAvroCRC64Fingerprint)
}

func (r Bank) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["name"], err = json.Marshal(r.Name)
	if err != nil {
		return nil, err
	}
	output["country"], err = json.Marshal(r.Country)
	if err != nil {
		return nil, err
	}
	output["email"], err = json.Marshal(r.Email)
	if err != nil {
		return nil, err
	}
	output["website"], err = json.Marshal(r.Website)
	if err != nil {
		return nil, err
	}
	output["bankCode"], err = json.Marshal(r.BankCode)
	if err != nil {
		return nil, err
	}
	output["bic"], err = json.Marshal(r.Bic)
	if err != nil {
		return nil, err
	}
	output["branch"], err = json.Marshal(r.Branch)
	if err != nil {
		return nil, err
	}
	output["created_ts"], err = json.Marshal(r.Created_ts)
	if err != nil {
		return nil, err
	}
	output["updated_ts"], err = json.Marshal(r.Updated_ts)
	if err != nil {
		return nil, err
	}
	output["version"], err = json.Marshal(r.Version)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Bank) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["name"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Name); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for name")
	}
	val = func() json.RawMessage {
		if v, ok := fields["country"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Country); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for country")
	}
	val = func() json.RawMessage {
		if v, ok := fields["email"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Email); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for email")
	}
	val = func() json.RawMessage {
		if v, ok := fields["website"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Website); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for website")
	}
	val = func() json.RawMessage {
		if v, ok := fields["bankCode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.BankCode); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bankCode")
	}
	val = func() json.RawMessage {
		if v, ok := fields["bic"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Bic); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for bic")
	}
	val = func() json.RawMessage {
		if v, ok := fields["branch"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Branch); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for branch")
	}
	val = func() json.RawMessage {
		if v, ok := fields["created_ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Created_ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for created_ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["updated_ts"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Updated_ts); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for updated_ts")
	}
	val = func() json.RawMessage {
		if v, ok := fields["version"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Version); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for version")
	}
	return nil
}
